%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 597 210
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, May 1, 2024, 4:55:50â€¯PM Central European Summer Time
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
597 210 setpagesize
0 0 0 0 setmargins
0 0 setorigin
597 210 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
597.000 0.00000 l
597.000 210.000 l
0.00000 210.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
597.000 0.00000 l
597.000 210.000 l
0.00000 210.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 597 210 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -175.000 -27.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
175.000 27.0000 m
772.000 27.0000 l
772.000 237.000 l
175.000 237.000 l
175.000 27.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -175.000 -27.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -175.000 -27.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -175.000 -27.0000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .800000 0.00000 RG
newpath
190.000 93.0000 m
270.000 93.0000 l
270.000 168.000 l
190.000 168.000 l
190.000 93.0000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
190.000 93.0000 m
270.000 93.0000 l
270.000 168.000 l
190.000 168.000 l
190.000 93.0000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
217.780 135.214 m
217.780 126.620 l
218.905 126.620 l
218.905 135.214 l
217.780 135.214 l
h
220.786 135.214 m
220.786 128.995 l
221.724 128.995 l
221.724 129.870 l
222.182 129.193 222.843 128.854 223.708 128.854  c
224.083 128.854 224.427 128.922 224.739 129.058  c
225.062 129.193 225.302 129.370 225.458 129.589  c
225.614 129.808 225.724 130.063 225.786 130.354  c
225.817 130.552 225.833 130.896 225.833 131.386  c
225.833 135.214 l
224.786 135.214 l
224.786 131.433 l
224.786 130.995 224.744 130.672 224.661 130.464  c
224.578 130.256 224.432 130.089 224.224 129.964  c
224.015 129.828 223.771 129.761 223.489 129.761  c
223.041 129.761 222.651 129.907 222.317 130.198  c
221.994 130.479 221.833 131.016 221.833 131.808  c
221.833 135.214 l
220.786 135.214 l
h
227.460 137.604 m
227.460 128.995 l
228.413 128.995 l
228.413 129.792 l
228.642 129.479 228.897 129.245 229.179 129.089  c
229.470 128.933 229.819 128.854 230.226 128.854  c
230.757 128.854 231.226 128.990 231.632 129.261  c
232.038 129.532 232.340 129.917 232.538 130.417  c
232.746 130.917 232.851 131.464 232.851 132.058  c
232.851 132.693 232.736 133.266 232.507 133.776  c
232.288 134.287 231.960 134.677 231.522 134.948  c
231.085 135.219 230.627 135.354 230.147 135.354  c
229.793 135.354 229.476 135.282 229.194 135.136  c
228.913 134.979 228.684 134.792 228.507 134.573  c
228.507 137.604 l
227.460 137.604 l
h
228.413 132.136 m
228.413 132.938 228.575 133.532 228.897 133.917  c
229.220 134.292 229.611 134.479 230.069 134.479  c
230.538 134.479 230.939 134.282 231.272 133.886  c
231.606 133.490 231.772 132.875 231.772 132.042  c
231.772 131.250 231.611 130.662 231.288 130.276  c
230.965 129.881 230.575 129.683 230.116 129.683  c
229.668 129.683 229.272 129.891 228.929 130.308  c
228.585 130.724 228.413 131.334 228.413 132.136  c
h
238.212 135.214 m
238.212 134.292 l
237.722 135.000 237.061 135.354 236.228 135.354  c
235.863 135.354 235.519 135.287 235.196 135.151  c
234.884 135.006 234.649 134.828 234.493 134.620  c
234.337 134.401 234.228 134.136 234.165 133.823  c
234.123 133.625 234.103 133.297 234.103 132.839  c
234.103 128.995 l
235.165 128.995 l
235.165 132.448 l
235.165 132.990 235.186 133.360 235.228 133.558  c
235.290 133.828 235.425 134.047 235.634 134.214  c
235.853 134.370 236.123 134.448 236.446 134.448  c
236.759 134.448 237.050 134.370 237.321 134.214  c
237.603 134.047 237.800 133.823 237.915 133.542  c
238.040 133.261 238.103 132.854 238.103 132.323  c
238.103 128.995 l
239.149 128.995 l
239.149 135.214 l
238.212 135.214 l
h
243.104 134.276 m
243.261 135.198 l
242.959 135.261 242.693 135.292 242.464 135.292  c
242.078 135.292 241.782 135.235 241.573 135.120  c
241.365 134.995 241.214 134.834 241.120 134.636  c
241.037 134.438 240.995 134.021 240.995 133.386  c
240.995 129.808 l
240.229 129.808 l
240.229 128.995 l
240.995 128.995 l
240.995 127.448 l
242.042 126.823 l
242.042 128.995 l
243.104 128.995 l
243.104 129.808 l
242.042 129.808 l
242.042 133.448 l
242.042 133.750 242.058 133.943 242.089 134.026  c
242.131 134.110 242.193 134.177 242.276 134.229  c
242.360 134.282 242.479 134.308 242.636 134.308  c
242.761 134.308 242.917 134.297 243.104 134.276  c
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
343.000 42.0000 m
423.000 42.0000 l
423.000 117.000 l
343.000 117.000 l
343.000 42.0000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
343.000 42.0000 m
423.000 42.0000 l
423.000 117.000 l
343.000 117.000 l
343.000 42.0000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
367.873 84.2139 m
367.873 75.6201 l
369.014 75.6201 l
369.014 83.1982 l
373.248 83.1982 l
373.248 84.2139 l
367.873 84.2139 l
h
374.219 81.4482 m
375.281 81.3545 l
375.333 81.7920 375.453 82.1462 375.641 82.4170  c
375.828 82.6878 376.115 82.9118 376.500 83.0889  c
376.896 83.2555 377.339 83.3389 377.828 83.3389  c
378.255 83.3389 378.635 83.2764 378.969 83.1514  c
379.302 83.0160 379.547 82.8389 379.703 82.6201  c
379.870 82.3910 379.953 82.1462 379.953 81.8857  c
379.953 81.6149 379.875 81.3805 379.719 81.1826  c
379.562 80.9743 379.307 80.8024 378.953 80.6670  c
378.714 80.5732 378.198 80.4326 377.406 80.2451  c
376.625 80.0576 376.078 79.8805 375.766 79.7139  c
375.349 79.4951 375.042 79.2295 374.844 78.9170  c
374.646 78.5941 374.547 78.2347 374.547 77.8389  c
374.547 77.4118 374.667 77.0107 374.906 76.6357  c
375.156 76.2503 375.516 75.9639 375.984 75.7764  c
376.464 75.5785 376.990 75.4795 377.562 75.4795  c
378.198 75.4795 378.760 75.5837 379.250 75.7920  c
379.740 75.9899 380.115 76.2920 380.375 76.6982  c
380.635 77.0941 380.776 77.5420 380.797 78.0420  c
379.703 78.1201 l
379.641 77.5785 379.438 77.1722 379.094 76.9014  c
378.760 76.6201 378.266 76.4795 377.609 76.4795  c
376.922 76.4795 376.422 76.6045 376.109 76.8545  c
375.797 77.1045 375.641 77.4066 375.641 77.7607  c
375.641 78.0732 375.750 78.3285 375.969 78.5264  c
376.188 78.7243 376.755 78.9274 377.672 79.1357  c
378.599 79.3441 379.234 79.5264 379.578 79.6826  c
380.078 79.9222 380.448 80.2191 380.688 80.5732  c
380.927 80.9170 381.047 81.3232 381.047 81.7920  c
381.047 82.2503 380.917 82.6826 380.656 83.0889  c
380.396 83.4847 380.021 83.7972 379.531 84.0264  c
379.042 84.2451 378.490 84.3545 377.875 84.3545  c
377.094 84.3545 376.438 84.2451 375.906 84.0264  c
375.385 83.7972 374.974 83.4535 374.672 82.9951  c
374.380 82.5368 374.229 82.0212 374.219 81.4482  c
h
384.785 84.2139 m
384.785 76.6357 l
381.957 76.6357 l
381.957 75.6201 l
388.770 75.6201 l
388.770 76.6357 l
385.926 76.6357 l
385.926 84.2139 l
384.785 84.2139 l
h
389.896 84.2139 m
389.896 75.6201 l
391.615 75.6201 l
393.646 81.6982 l
393.834 82.2712 393.969 82.6982 394.053 82.9795  c
394.146 82.6670 394.298 82.2087 394.506 81.6045  c
396.568 75.6201 l
398.100 75.6201 l
398.100 84.2139 l
397.006 84.2139 l
397.006 77.0264 l
394.506 84.2139 l
393.475 84.2139 l
390.990 76.9014 l
390.990 84.2139 l
389.896 84.2139 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
343.000 147.000 m
423.000 147.000 l
423.000 222.000 l
343.000 222.000 l
343.000 147.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
343.000 147.000 m
423.000 147.000 l
423.000 222.000 l
343.000 222.000 l
343.000 147.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
367.873 189.214 m
367.873 180.620 l
369.014 180.620 l
369.014 188.198 l
373.248 188.198 l
373.248 189.214 l
367.873 189.214 l
h
374.219 186.448 m
375.281 186.354 l
375.333 186.792 375.453 187.146 375.641 187.417  c
375.828 187.688 376.115 187.912 376.500 188.089  c
376.896 188.256 377.339 188.339 377.828 188.339  c
378.255 188.339 378.635 188.276 378.969 188.151  c
379.302 188.016 379.547 187.839 379.703 187.620  c
379.870 187.391 379.953 187.146 379.953 186.886  c
379.953 186.615 379.875 186.381 379.719 186.183  c
379.562 185.974 379.307 185.802 378.953 185.667  c
378.714 185.573 378.198 185.433 377.406 185.245  c
376.625 185.058 376.078 184.881 375.766 184.714  c
375.349 184.495 375.042 184.229 374.844 183.917  c
374.646 183.594 374.547 183.235 374.547 182.839  c
374.547 182.412 374.667 182.011 374.906 181.636  c
375.156 181.250 375.516 180.964 375.984 180.776  c
376.464 180.578 376.990 180.479 377.562 180.479  c
378.198 180.479 378.760 180.584 379.250 180.792  c
379.740 180.990 380.115 181.292 380.375 181.698  c
380.635 182.094 380.776 182.542 380.797 183.042  c
379.703 183.120 l
379.641 182.578 379.438 182.172 379.094 181.901  c
378.760 181.620 378.266 181.479 377.609 181.479  c
376.922 181.479 376.422 181.604 376.109 181.854  c
375.797 182.104 375.641 182.407 375.641 182.761  c
375.641 183.073 375.750 183.328 375.969 183.526  c
376.188 183.724 376.755 183.927 377.672 184.136  c
378.599 184.344 379.234 184.526 379.578 184.683  c
380.078 184.922 380.448 185.219 380.688 185.573  c
380.927 185.917 381.047 186.323 381.047 186.792  c
381.047 187.250 380.917 187.683 380.656 188.089  c
380.396 188.485 380.021 188.797 379.531 189.026  c
379.042 189.245 378.490 189.354 377.875 189.354  c
377.094 189.354 376.438 189.245 375.906 189.026  c
375.385 188.797 374.974 188.453 374.672 187.995  c
374.380 187.537 374.229 187.021 374.219 186.448  c
h
384.785 189.214 m
384.785 181.636 l
381.957 181.636 l
381.957 180.620 l
388.770 180.620 l
388.770 181.636 l
385.926 181.636 l
385.926 189.214 l
384.785 189.214 l
h
389.896 189.214 m
389.896 180.620 l
391.615 180.620 l
393.646 186.698 l
393.834 187.271 393.969 187.698 394.053 187.979  c
394.146 187.667 394.298 187.209 394.506 186.604  c
396.568 180.620 l
398.100 180.620 l
398.100 189.214 l
397.006 189.214 l
397.006 182.026 l
394.506 189.214 l
393.475 189.214 l
390.990 181.901 l
390.990 189.214 l
389.896 189.214 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
461.000 93.0000 m
557.000 93.0000 l
533.000 168.000 l
485.000 168.000 l
h
f*
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
461.000 93.0000 m
557.000 93.0000 l
533.000 168.000 l
485.000 168.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
493.873 135.214 m
493.873 126.620 l
495.014 126.620 l
495.014 134.198 l
499.248 134.198 l
499.248 135.214 l
493.873 135.214 l
h
500.219 132.448 m
501.281 132.354 l
501.333 132.792 501.453 133.146 501.641 133.417  c
501.828 133.688 502.115 133.912 502.500 134.089  c
502.896 134.256 503.339 134.339 503.828 134.339  c
504.255 134.339 504.635 134.276 504.969 134.151  c
505.302 134.016 505.547 133.839 505.703 133.620  c
505.870 133.391 505.953 133.146 505.953 132.886  c
505.953 132.615 505.875 132.381 505.719 132.183  c
505.562 131.974 505.307 131.802 504.953 131.667  c
504.714 131.573 504.198 131.433 503.406 131.245  c
502.625 131.058 502.078 130.881 501.766 130.714  c
501.349 130.495 501.042 130.229 500.844 129.917  c
500.646 129.594 500.547 129.235 500.547 128.839  c
500.547 128.412 500.667 128.011 500.906 127.636  c
501.156 127.250 501.516 126.964 501.984 126.776  c
502.464 126.578 502.990 126.479 503.562 126.479  c
504.198 126.479 504.760 126.584 505.250 126.792  c
505.740 126.990 506.115 127.292 506.375 127.698  c
506.635 128.094 506.776 128.542 506.797 129.042  c
505.703 129.120 l
505.641 128.578 505.438 128.172 505.094 127.901  c
504.760 127.620 504.266 127.479 503.609 127.479  c
502.922 127.479 502.422 127.604 502.109 127.854  c
501.797 128.104 501.641 128.407 501.641 128.761  c
501.641 129.073 501.750 129.328 501.969 129.526  c
502.188 129.724 502.755 129.927 503.672 130.136  c
504.599 130.344 505.234 130.526 505.578 130.683  c
506.078 130.922 506.448 131.219 506.688 131.573  c
506.927 131.917 507.047 132.323 507.047 132.792  c
507.047 133.250 506.917 133.683 506.656 134.089  c
506.396 134.485 506.021 134.797 505.531 135.026  c
505.042 135.245 504.490 135.354 503.875 135.354  c
503.094 135.354 502.438 135.245 501.906 135.026  c
501.385 134.797 500.974 134.453 500.672 133.995  c
500.380 133.537 500.229 133.021 500.219 132.448  c
h
510.785 135.214 m
510.785 127.636 l
507.957 127.636 l
507.957 126.620 l
514.770 126.620 l
514.770 127.636 l
511.926 127.636 l
511.926 135.214 l
510.785 135.214 l
h
515.896 135.214 m
515.896 126.620 l
517.615 126.620 l
519.646 132.698 l
519.834 133.271 519.969 133.698 520.053 133.979  c
520.146 133.667 520.298 133.209 520.506 132.604  c
522.568 126.620 l
524.100 126.620 l
524.100 135.214 l
523.006 135.214 l
523.006 128.026 l
520.506 135.214 l
519.475 135.214 l
516.990 127.901 l
516.990 135.214 l
515.896 135.214 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
695.000 119.316 m
713.159 103.500 l
738.841 103.500 l
757.000 119.316 l
757.000 141.684 l
738.841 157.500 l
713.159 157.500 l
695.000 141.684 l
h
f*
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
695.000 119.316 m
713.159 103.500 l
738.841 103.500 l
757.000 119.316 l
757.000 141.684 l
738.841 157.500 l
713.159 157.500 l
695.000 141.684 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
708.566 131.026 m
708.566 129.599 708.947 128.485 709.707 127.683  c
710.478 126.870 711.467 126.464 712.676 126.464  c
713.478 126.464 714.197 126.657 714.832 127.042  c
715.467 127.417 715.952 127.943 716.285 128.620  c
716.618 129.297 716.785 130.068 716.785 130.933  c
716.785 131.797 716.608 132.573 716.254 133.261  c
715.900 133.948 715.400 134.469 714.754 134.823  c
714.118 135.177 713.426 135.354 712.676 135.354  c
711.863 135.354 711.139 135.162 710.504 134.776  c
709.868 134.381 709.384 133.849 709.051 133.183  c
708.728 132.506 708.566 131.787 708.566 131.026  c
h
709.738 131.042 m
709.738 132.084 710.014 132.901 710.566 133.495  c
711.129 134.089 711.832 134.386 712.676 134.386  c
713.530 134.386 714.233 134.089 714.785 133.495  c
715.337 132.891 715.613 132.032 715.613 130.917  c
715.613 130.219 715.493 129.610 715.254 129.089  c
715.025 128.568 714.681 128.167 714.223 127.886  c
713.764 127.594 713.254 127.448 712.691 127.448  c
711.889 127.448 711.197 127.724 710.613 128.276  c
710.030 128.828 709.738 129.750 709.738 131.042  c
h
722.197 135.214 m
722.197 134.292 l
721.708 135.000 721.046 135.354 720.213 135.354  c
719.848 135.354 719.505 135.287 719.182 135.151  c
718.869 135.006 718.635 134.828 718.479 134.620  c
718.322 134.401 718.213 134.136 718.150 133.823  c
718.109 133.625 718.088 133.297 718.088 132.839  c
718.088 128.995 l
719.150 128.995 l
719.150 132.448 l
719.150 132.990 719.171 133.360 719.213 133.558  c
719.275 133.828 719.411 134.047 719.619 134.214  c
719.838 134.370 720.109 134.448 720.432 134.448  c
720.744 134.448 721.036 134.370 721.307 134.214  c
721.588 134.047 721.786 133.823 721.900 133.542  c
722.025 133.261 722.088 132.854 722.088 132.323  c
722.088 128.995 l
723.135 128.995 l
723.135 135.214 l
722.197 135.214 l
h
727.090 134.276 m
727.246 135.198 l
726.944 135.261 726.678 135.292 726.449 135.292  c
726.064 135.292 725.767 135.235 725.559 135.120  c
725.350 134.995 725.199 134.834 725.105 134.636  c
725.022 134.438 724.980 134.021 724.980 133.386  c
724.980 129.808 l
724.215 129.808 l
724.215 128.995 l
724.980 128.995 l
724.980 127.448 l
726.027 126.823 l
726.027 128.995 l
727.090 128.995 l
727.090 129.808 l
726.027 129.808 l
726.027 133.448 l
726.027 133.750 726.043 133.943 726.074 134.026  c
726.116 134.110 726.178 134.177 726.262 134.229  c
726.345 134.282 726.465 134.308 726.621 134.308  c
726.746 134.308 726.902 134.297 727.090 134.276  c
h
728.127 137.604 m
728.127 128.995 l
729.080 128.995 l
729.080 129.792 l
729.309 129.479 729.564 129.245 729.846 129.089  c
730.137 128.933 730.486 128.854 730.893 128.854  c
731.424 128.854 731.893 128.990 732.299 129.261  c
732.705 129.532 733.007 129.917 733.205 130.417  c
733.413 130.917 733.518 131.464 733.518 132.058  c
733.518 132.693 733.403 133.266 733.174 133.776  c
732.955 134.287 732.627 134.677 732.189 134.948  c
731.752 135.219 731.294 135.354 730.814 135.354  c
730.460 135.354 730.143 135.282 729.861 135.136  c
729.580 134.979 729.351 134.792 729.174 134.573  c
729.174 137.604 l
728.127 137.604 l
h
729.080 132.136 m
729.080 132.938 729.242 133.532 729.564 133.917  c
729.887 134.292 730.278 134.479 730.736 134.479  c
731.205 134.479 731.606 134.282 731.939 133.886  c
732.273 133.490 732.439 132.875 732.439 132.042  c
732.439 131.250 732.278 130.662 731.955 130.276  c
731.632 129.881 731.242 129.683 730.783 129.683  c
730.335 129.683 729.939 129.891 729.596 130.308  c
729.252 130.724 729.080 131.334 729.080 132.136  c
h
738.879 135.214 m
738.879 134.292 l
738.389 135.000 737.728 135.354 736.895 135.354  c
736.530 135.354 736.186 135.287 735.863 135.151  c
735.551 135.006 735.316 134.828 735.160 134.620  c
735.004 134.401 734.895 134.136 734.832 133.823  c
734.790 133.625 734.770 133.297 734.770 132.839  c
734.770 128.995 l
735.832 128.995 l
735.832 132.448 l
735.832 132.990 735.853 133.360 735.895 133.558  c
735.957 133.828 736.092 134.047 736.301 134.214  c
736.520 134.370 736.790 134.448 737.113 134.448  c
737.426 134.448 737.717 134.370 737.988 134.214  c
738.270 134.047 738.467 133.823 738.582 133.542  c
738.707 133.261 738.770 132.854 738.770 132.323  c
738.770 128.995 l
739.816 128.995 l
739.816 135.214 l
738.879 135.214 l
h
743.771 134.276 m
743.928 135.198 l
743.626 135.261 743.360 135.292 743.131 135.292  c
742.745 135.292 742.449 135.235 742.240 135.120  c
742.032 134.995 741.881 134.834 741.787 134.636  c
741.704 134.438 741.662 134.021 741.662 133.386  c
741.662 129.808 l
740.896 129.808 l
740.896 128.995 l
741.662 128.995 l
741.662 127.448 l
742.709 126.823 l
742.709 128.995 l
743.771 128.995 l
743.771 129.808 l
742.709 129.808 l
742.709 133.448 l
742.709 133.750 742.725 133.943 742.756 134.026  c
742.798 134.110 742.860 134.177 742.943 134.229  c
743.027 134.282 743.146 134.308 743.303 134.308  c
743.428 134.308 743.584 134.297 743.771 134.276  c
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
595.000 93.0000 m
667.000 93.0000 l
631.000 168.000 l
h
f*
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
595.000 93.0000 m
667.000 93.0000 l
631.000 168.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
615.873 135.214 m
615.873 126.620 l
617.014 126.620 l
617.014 134.198 l
621.248 134.198 l
621.248 135.214 l
615.873 135.214 l
h
622.219 132.448 m
623.281 132.354 l
623.333 132.792 623.453 133.146 623.641 133.417  c
623.828 133.688 624.115 133.912 624.500 134.089  c
624.896 134.256 625.339 134.339 625.828 134.339  c
626.255 134.339 626.635 134.276 626.969 134.151  c
627.302 134.016 627.547 133.839 627.703 133.620  c
627.870 133.391 627.953 133.146 627.953 132.886  c
627.953 132.615 627.875 132.381 627.719 132.183  c
627.562 131.974 627.307 131.802 626.953 131.667  c
626.714 131.573 626.198 131.433 625.406 131.245  c
624.625 131.058 624.078 130.881 623.766 130.714  c
623.349 130.495 623.042 130.229 622.844 129.917  c
622.646 129.594 622.547 129.235 622.547 128.839  c
622.547 128.412 622.667 128.011 622.906 127.636  c
623.156 127.250 623.516 126.964 623.984 126.776  c
624.464 126.578 624.990 126.479 625.562 126.479  c
626.198 126.479 626.760 126.584 627.250 126.792  c
627.740 126.990 628.115 127.292 628.375 127.698  c
628.635 128.094 628.776 128.542 628.797 129.042  c
627.703 129.120 l
627.641 128.578 627.438 128.172 627.094 127.901  c
626.760 127.620 626.266 127.479 625.609 127.479  c
624.922 127.479 624.422 127.604 624.109 127.854  c
623.797 128.104 623.641 128.407 623.641 128.761  c
623.641 129.073 623.750 129.328 623.969 129.526  c
624.188 129.724 624.755 129.927 625.672 130.136  c
626.599 130.344 627.234 130.526 627.578 130.683  c
628.078 130.922 628.448 131.219 628.688 131.573  c
628.927 131.917 629.047 132.323 629.047 132.792  c
629.047 133.250 628.917 133.683 628.656 134.089  c
628.396 134.485 628.021 134.797 627.531 135.026  c
627.042 135.245 626.490 135.354 625.875 135.354  c
625.094 135.354 624.438 135.245 623.906 135.026  c
623.385 134.797 622.974 134.453 622.672 133.995  c
622.380 133.537 622.229 133.021 622.219 132.448  c
h
632.785 135.214 m
632.785 127.636 l
629.957 127.636 l
629.957 126.620 l
636.770 126.620 l
636.770 127.636 l
633.926 127.636 l
633.926 135.214 l
632.785 135.214 l
h
637.896 135.214 m
637.896 126.620 l
639.615 126.620 l
641.646 132.698 l
641.834 133.271 641.969 133.698 642.053 133.979  c
642.146 133.667 642.298 133.209 642.506 132.604  c
644.568 126.620 l
646.100 126.620 l
646.100 135.214 l
645.006 135.214 l
645.006 128.026 l
642.506 135.214 l
641.475 135.214 l
638.990 127.901 l
638.990 135.214 l
637.896 135.214 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
270.000 117.167 m
335.411 95.3632 l
S
newpath
343.000 92.8333 m
330.035 91.8846 l
334.462 95.6794 l
333.197 101.371 l
h
f
newpath
283.931 78.4792 m
283.931 69.8854 l
287.744 69.8854 l
288.515 69.8854 289.098 69.9636 289.494 70.1198  c
289.890 70.2761 290.207 70.5521 290.447 70.9479  c
290.687 71.3334 290.806 71.7604 290.806 72.2292  c
290.806 72.8438 290.608 73.3594 290.213 73.7761  c
289.817 74.1927 289.207 74.4584 288.385 74.5729  c
288.687 74.7188 288.916 74.8594 289.072 74.9948  c
289.405 75.2969 289.718 75.6771 290.010 76.1354  c
291.510 78.4792 l
290.072 78.4792 l
288.947 76.6979 l
288.614 76.1771 288.338 75.7813 288.119 75.5104  c
287.911 75.2396 287.718 75.0521 287.541 74.9479  c
287.374 74.8334 287.202 74.7500 287.025 74.6979  c
286.900 74.6771 286.692 74.6667 286.400 74.6667  c
285.072 74.6667 l
285.072 78.4792 l
283.931 78.4792 l
h
285.072 73.6823 m
287.525 73.6823 l
288.036 73.6823 288.437 73.6302 288.728 73.5261  c
289.030 73.4115 289.254 73.2396 289.400 73.0104  c
289.556 72.7709 289.635 72.5104 289.635 72.2292  c
289.635 71.8229 289.483 71.4896 289.181 71.2292  c
288.890 70.9688 288.426 70.8386 287.791 70.8386  c
285.072 70.8386 l
285.072 73.6823 l
h
296.707 76.4792 m
297.801 76.6042 l
297.634 77.2396 297.316 77.7344 296.847 78.0886  c
296.379 78.4427 295.785 78.6198 295.066 78.6198  c
294.160 78.6198 293.436 78.3386 292.894 77.7761  c
292.363 77.2136 292.097 76.4271 292.097 75.4167  c
292.097 74.3750 292.368 73.5677 292.910 72.9948  c
293.452 72.4115 294.149 72.1198 295.004 72.1198  c
295.837 72.1198 296.514 72.4011 297.035 72.9636  c
297.566 73.5261 297.832 74.3229 297.832 75.3542  c
297.832 75.4167 297.832 75.5104 297.832 75.6354  c
293.191 75.6354 l
293.233 76.3229 293.426 76.8490 293.769 77.2136  c
294.113 77.5677 294.545 77.7448 295.066 77.7448  c
295.452 77.7448 295.780 77.6459 296.051 77.4479  c
296.332 77.2396 296.551 76.9167 296.707 76.4792  c
h
293.254 74.7761 m
296.722 74.7761 l
296.681 74.2448 296.551 73.8490 296.332 73.5886  c
295.988 73.1823 295.551 72.9792 295.019 72.9792  c
294.530 72.9792 294.118 73.1407 293.785 73.4636  c
293.462 73.7865 293.285 74.2240 293.254 74.7761  c
h
300.849 78.4792 m
298.490 72.2604 l
299.599 72.2604 l
300.943 75.9792 l
301.079 76.3854 301.209 76.8021 301.334 77.2292  c
301.427 76.9063 301.558 76.5157 301.724 76.0573  c
303.115 72.2604 l
304.193 72.2604 l
301.834 78.4792 l
300.849 78.4792 l
h
309.381 76.4792 m
310.474 76.6042 l
310.308 77.2396 309.990 77.7344 309.521 78.0886  c
309.052 78.4427 308.459 78.6198 307.740 78.6198  c
306.834 78.6198 306.110 78.3386 305.568 77.7761  c
305.037 77.2136 304.771 76.4271 304.771 75.4167  c
304.771 74.3750 305.042 73.5677 305.584 72.9948  c
306.125 72.4115 306.823 72.1198 307.677 72.1198  c
308.511 72.1198 309.188 72.4011 309.709 72.9636  c
310.240 73.5261 310.506 74.3229 310.506 75.3542  c
310.506 75.4167 310.506 75.5104 310.506 75.6354  c
305.865 75.6354 l
305.907 76.3229 306.099 76.8490 306.443 77.2136  c
306.787 77.5677 307.219 77.7448 307.740 77.7448  c
308.125 77.7448 308.454 77.6459 308.724 77.4479  c
309.006 77.2396 309.224 76.9167 309.381 76.4792  c
h
305.927 74.7761 m
309.396 74.7761 l
309.355 74.2448 309.224 73.8490 309.006 73.5886  c
308.662 73.1823 308.224 72.9792 307.693 72.9792  c
307.204 72.9792 306.792 73.1407 306.459 73.4636  c
306.136 73.7865 305.959 74.2240 305.927 74.7761  c
h
311.789 78.4792 m
311.789 72.2604 l
312.742 72.2604 l
312.742 73.1979 l
312.982 72.7604 313.200 72.4740 313.398 72.3386  c
313.607 72.1927 313.836 72.1198 314.086 72.1198  c
314.440 72.1198 314.799 72.2292 315.164 72.4479  c
314.804 73.4323 l
314.544 73.2761 314.289 73.1979 314.039 73.1979  c
313.799 73.1979 313.586 73.2709 313.398 73.4167  c
313.221 73.5521 313.096 73.7448 313.023 73.9948  c
312.898 74.3698 312.836 74.7761 312.836 75.2136  c
312.836 78.4792 l
311.789 78.4792 l
h
315.379 76.6198 m
316.410 76.4636 l
316.472 76.8802 316.634 77.1979 316.894 77.4167  c
317.165 77.6354 317.545 77.7448 318.035 77.7448  c
318.514 77.7448 318.868 77.6511 319.097 77.4636  c
319.337 77.2657 319.457 77.0313 319.457 76.7604  c
319.457 76.5209 319.353 76.3334 319.144 76.1979  c
318.998 76.1042 318.639 75.9844 318.066 75.8386  c
317.295 75.6407 316.759 75.4740 316.457 75.3386  c
316.165 75.1927 315.941 74.9948 315.785 74.7448  c
315.629 74.4948 315.551 74.2136 315.551 73.9011  c
315.551 73.6302 315.613 73.3750 315.738 73.1354  c
315.863 72.8959 316.035 72.6979 316.254 72.5417  c
316.420 72.4271 316.644 72.3282 316.926 72.2448  c
317.207 72.1615 317.514 72.1198 317.847 72.1198  c
318.327 72.1198 318.748 72.1927 319.113 72.3386  c
319.488 72.4740 319.764 72.6615 319.941 72.9011  c
320.118 73.1407 320.238 73.4584 320.301 73.8542  c
319.269 73.9948 l
319.228 73.6823 319.092 73.4375 318.863 73.2604  c
318.644 73.0729 318.327 72.9792 317.910 72.9792  c
317.431 72.9792 317.087 73.0625 316.879 73.2292  c
316.670 73.3854 316.566 73.5729 316.566 73.7917  c
316.566 73.9271 316.608 74.0469 316.691 74.1511  c
316.785 74.2657 316.920 74.3594 317.097 74.4323  c
317.202 74.4740 317.514 74.5625 318.035 74.6979  c
318.785 74.9063 319.306 75.0729 319.597 75.1979  c
319.889 75.3229 320.118 75.5052 320.285 75.7448  c
320.452 75.9844 320.535 76.2865 320.535 76.6511  c
320.535 77.0052 320.431 77.3386 320.222 77.6511  c
320.024 77.9532 319.733 78.1927 319.347 78.3698  c
318.962 78.5365 318.524 78.6198 318.035 78.6198  c
317.222 78.6198 316.603 78.4532 316.176 78.1198  c
315.759 77.7761 315.493 77.2761 315.379 76.6198  c
h
326.051 76.4792 m
327.144 76.6042 l
326.978 77.2396 326.660 77.7344 326.191 78.0886  c
325.722 78.4427 325.129 78.6198 324.410 78.6198  c
323.504 78.6198 322.780 78.3386 322.238 77.7761  c
321.707 77.2136 321.441 76.4271 321.441 75.4167  c
321.441 74.3750 321.712 73.5677 322.254 72.9948  c
322.795 72.4115 323.493 72.1198 324.347 72.1198  c
325.181 72.1198 325.858 72.4011 326.379 72.9636  c
326.910 73.5261 327.176 74.3229 327.176 75.3542  c
327.176 75.4167 327.176 75.5104 327.176 75.6354  c
322.535 75.6354 l
322.577 76.3229 322.769 76.8490 323.113 77.2136  c
323.457 77.5677 323.889 77.7448 324.410 77.7448  c
324.795 77.7448 325.123 77.6459 325.394 77.4479  c
325.676 77.2396 325.894 76.9167 326.051 76.4792  c
h
322.597 74.7761 m
326.066 74.7761 l
326.024 74.2448 325.894 73.8490 325.676 73.5886  c
325.332 73.1823 324.894 72.9792 324.363 72.9792  c
323.873 72.9792 323.462 73.1407 323.129 73.4636  c
322.806 73.7865 322.629 74.2240 322.597 74.7761  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
270.000 144.618 m
335.456 167.720 l
S
newpath
343.000 170.382 m
333.348 161.674 l
334.513 167.387 l
330.020 171.103 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
423.000 95.6905 m
460.222 110.757 l
S
newpath
467.638 113.758 m
458.390 104.621 l
459.295 110.381 l
454.638 113.891 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
423.000 167.357 m
470.027 147.203 l
S
newpath
477.380 144.051 m
464.381 144.183 l
469.108 147.597 l
468.320 153.374 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
545.010 130.500 m
604.987 130.500 l
S
newpath
612.987 130.500 m
600.987 125.500 l
603.987 130.500 l
600.987 135.500 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
649.044 130.500 m
687.000 130.500 l
S
newpath
695.000 130.500 m
683.000 125.500 l
686.000 130.500 l
683.000 135.500 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
