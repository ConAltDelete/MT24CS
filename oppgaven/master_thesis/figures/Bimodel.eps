%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 575 276
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, May 12, 2024, 5:24:48â€¯PM Central European Summer Time
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
575 276 setpagesize
0 0 0 0 setmargins
0 0 setorigin
575 276 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
575.000 0.00000 l
575.000 276.000 l
0.00000 276.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
575.000 0.00000 l
575.000 276.000 l
0.00000 276.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 575 276 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -252.000 -151.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
252.000 151.000 m
827.000 151.000 l
827.000 427.000 l
252.000 427.000 l
252.000 151.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -252.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -252.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -252.000 -151.000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .800000 0.00000 RG
newpath
267.000 299.000 m
320.500 246.000 l
374.000 299.000 l
320.500 352.000 l
h
f*
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
267.000 299.000 m
320.500 246.000 l
374.000 299.000 l
320.500 352.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
308.280 303.714 m
308.280 295.120 l
309.405 295.120 l
309.405 303.714 l
308.280 303.714 l
h
311.286 303.714 m
311.286 297.495 l
312.224 297.495 l
312.224 298.370 l
312.682 297.693 313.343 297.354 314.208 297.354  c
314.583 297.354 314.927 297.422 315.239 297.558  c
315.562 297.693 315.802 297.870 315.958 298.089  c
316.114 298.308 316.224 298.563 316.286 298.854  c
316.317 299.052 316.333 299.396 316.333 299.886  c
316.333 303.714 l
315.286 303.714 l
315.286 299.933 l
315.286 299.495 315.244 299.172 315.161 298.964  c
315.078 298.756 314.932 298.589 314.724 298.464  c
314.515 298.328 314.271 298.261 313.989 298.261  c
313.541 298.261 313.151 298.407 312.817 298.698  c
312.494 298.979 312.333 299.516 312.333 300.308  c
312.333 303.714 l
311.286 303.714 l
h
317.960 306.104 m
317.960 297.495 l
318.913 297.495 l
318.913 298.292 l
319.142 297.979 319.397 297.745 319.679 297.589  c
319.970 297.433 320.319 297.354 320.726 297.354  c
321.257 297.354 321.726 297.490 322.132 297.761  c
322.538 298.032 322.840 298.417 323.038 298.917  c
323.246 299.417 323.351 299.964 323.351 300.558  c
323.351 301.193 323.236 301.766 323.007 302.276  c
322.788 302.787 322.460 303.177 322.022 303.448  c
321.585 303.719 321.127 303.854 320.647 303.854  c
320.293 303.854 319.976 303.782 319.694 303.636  c
319.413 303.479 319.184 303.292 319.007 303.073  c
319.007 306.104 l
317.960 306.104 l
h
318.913 300.636 m
318.913 301.438 319.075 302.032 319.397 302.417  c
319.720 302.792 320.111 302.979 320.569 302.979  c
321.038 302.979 321.439 302.782 321.772 302.386  c
322.106 301.990 322.272 301.375 322.272 300.542  c
322.272 299.750 322.111 299.162 321.788 298.776  c
321.465 298.381 321.075 298.183 320.616 298.183  c
320.168 298.183 319.772 298.391 319.429 298.808  c
319.085 299.224 318.913 299.834 318.913 300.636  c
h
328.712 303.714 m
328.712 302.792 l
328.222 303.500 327.561 303.854 326.728 303.854  c
326.363 303.854 326.019 303.787 325.696 303.651  c
325.384 303.506 325.149 303.328 324.993 303.120  c
324.837 302.901 324.728 302.636 324.665 302.323  c
324.623 302.125 324.603 301.797 324.603 301.339  c
324.603 297.495 l
325.665 297.495 l
325.665 300.948 l
325.665 301.490 325.686 301.860 325.728 302.058  c
325.790 302.328 325.925 302.547 326.134 302.714  c
326.353 302.870 326.623 302.948 326.946 302.948  c
327.259 302.948 327.550 302.870 327.821 302.714  c
328.103 302.547 328.300 302.323 328.415 302.042  c
328.540 301.761 328.603 301.354 328.603 300.823  c
328.603 297.495 l
329.649 297.495 l
329.649 303.714 l
328.712 303.714 l
h
333.604 302.776 m
333.761 303.698 l
333.459 303.761 333.193 303.792 332.964 303.792  c
332.578 303.792 332.282 303.735 332.073 303.620  c
331.865 303.495 331.714 303.334 331.620 303.136  c
331.537 302.938 331.495 302.521 331.495 301.886  c
331.495 298.308 l
330.729 298.308 l
330.729 297.495 l
331.495 297.495 l
331.495 295.948 l
332.542 295.323 l
332.542 297.495 l
333.604 297.495 l
333.604 298.308 l
332.542 298.308 l
332.542 301.948 l
332.542 302.250 332.558 302.443 332.589 302.526  c
332.631 302.610 332.693 302.677 332.776 302.729  c
332.860 302.782 332.979 302.808 333.136 302.808  c
333.261 302.808 333.417 302.797 333.604 302.776  c
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
497.000 166.000 m
582.000 166.000 l
582.000 247.000 l
497.000 247.000 l
497.000 166.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
497.000 166.000 m
582.000 166.000 l
582.000 247.000 l
497.000 247.000 l
497.000 166.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
524.049 211.214 m
524.049 202.620 l
525.768 202.620 l
527.799 208.698 l
527.986 209.271 528.122 209.698 528.205 209.979  c
528.299 209.667 528.450 209.209 528.658 208.604  c
530.721 202.620 l
532.252 202.620 l
532.252 211.214 l
531.158 211.214 l
531.158 204.026 l
528.658 211.214 l
527.627 211.214 l
525.143 203.901 l
525.143 211.214 l
524.049 211.214 l
h
533.561 208.104 m
533.561 206.948 533.878 206.094 534.514 205.542  c
535.045 205.084 535.696 204.854 536.467 204.854  c
537.321 204.854 538.019 205.136 538.561 205.698  c
539.113 206.250 539.389 207.021 539.389 208.011  c
539.389 208.813 539.269 209.443 539.029 209.901  c
538.790 210.360 538.436 210.719 537.967 210.979  c
537.508 211.229 537.008 211.354 536.467 211.354  c
535.602 211.354 534.899 211.078 534.357 210.526  c
533.826 209.964 533.561 209.157 533.561 208.104  c
h
534.639 208.104 m
534.639 208.896 534.811 209.490 535.154 209.886  c
535.508 210.282 535.946 210.479 536.467 210.479  c
536.998 210.479 537.436 210.282 537.779 209.886  c
538.123 209.490 538.295 208.886 538.295 208.073  c
538.295 207.302 538.118 206.719 537.764 206.323  c
537.420 205.927 536.988 205.729 536.467 205.729  c
535.946 205.729 535.508 205.927 535.154 206.323  c
534.811 206.709 534.639 207.302 534.639 208.104  c
h
544.656 211.214 m
544.656 210.433 l
544.260 211.047 543.682 211.354 542.922 211.354  c
542.422 211.354 541.964 211.219 541.547 210.948  c
541.130 210.667 540.807 210.282 540.578 209.792  c
540.349 209.302 540.234 208.740 540.234 208.104  c
540.234 207.490 540.339 206.927 540.547 206.417  c
540.755 205.907 541.068 205.521 541.484 205.261  c
541.901 204.990 542.365 204.854 542.875 204.854  c
543.250 204.854 543.583 204.933 543.875 205.089  c
544.167 205.245 544.406 205.448 544.594 205.698  c
544.594 202.620 l
545.641 202.620 l
545.641 211.214 l
544.656 211.214 l
h
541.328 208.104 m
541.328 208.907 541.495 209.506 541.828 209.901  c
542.161 210.287 542.557 210.479 543.016 210.479  c
543.474 210.479 543.865 210.292 544.188 209.917  c
544.510 209.542 544.672 208.969 544.672 208.198  c
544.672 207.344 544.505 206.719 544.172 206.323  c
543.849 205.927 543.448 205.729 542.969 205.729  c
542.500 205.729 542.109 205.922 541.797 206.308  c
541.484 206.683 541.328 207.282 541.328 208.104  c
h
551.549 209.214 m
552.643 209.339 l
552.476 209.974 552.158 210.469 551.689 210.823  c
551.221 211.177 550.627 211.354 549.908 211.354  c
549.002 211.354 548.278 211.073 547.736 210.511  c
547.205 209.948 546.939 209.162 546.939 208.151  c
546.939 207.110 547.210 206.302 547.752 205.729  c
548.294 205.146 548.992 204.854 549.846 204.854  c
550.679 204.854 551.356 205.136 551.877 205.698  c
552.408 206.261 552.674 207.058 552.674 208.089  c
552.674 208.151 552.674 208.245 552.674 208.370  c
548.033 208.370 l
548.075 209.058 548.268 209.584 548.611 209.948  c
548.955 210.302 549.387 210.479 549.908 210.479  c
550.294 210.479 550.622 210.381 550.893 210.183  c
551.174 209.974 551.393 209.651 551.549 209.214  c
h
548.096 207.511 m
551.564 207.511 l
551.523 206.979 551.393 206.584 551.174 206.323  c
550.830 205.917 550.393 205.714 549.861 205.714  c
549.372 205.714 548.960 205.875 548.627 206.198  c
548.304 206.521 548.127 206.959 548.096 207.511  c
h
553.941 211.214 m
553.941 202.620 l
555.004 202.620 l
555.004 211.214 l
553.941 211.214 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
497.000 331.000 m
582.000 331.000 l
582.000 412.000 l
497.000 412.000 l
497.000 331.000 l
h
f
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
497.000 331.000 m
582.000 331.000 l
582.000 412.000 l
497.000 412.000 l
497.000 331.000 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
524.049 376.214 m
524.049 367.620 l
525.768 367.620 l
527.799 373.698 l
527.986 374.271 528.122 374.698 528.205 374.979  c
528.299 374.667 528.450 374.209 528.658 373.604  c
530.721 367.620 l
532.252 367.620 l
532.252 376.214 l
531.158 376.214 l
531.158 369.026 l
528.658 376.214 l
527.627 376.214 l
525.143 368.901 l
525.143 376.214 l
524.049 376.214 l
h
533.561 373.104 m
533.561 371.948 533.878 371.094 534.514 370.542  c
535.045 370.084 535.696 369.854 536.467 369.854  c
537.321 369.854 538.019 370.136 538.561 370.698  c
539.113 371.250 539.389 372.021 539.389 373.011  c
539.389 373.813 539.269 374.443 539.029 374.901  c
538.790 375.360 538.436 375.719 537.967 375.979  c
537.508 376.229 537.008 376.354 536.467 376.354  c
535.602 376.354 534.899 376.078 534.357 375.526  c
533.826 374.964 533.561 374.157 533.561 373.104  c
h
534.639 373.104 m
534.639 373.896 534.811 374.490 535.154 374.886  c
535.508 375.282 535.946 375.479 536.467 375.479  c
536.998 375.479 537.436 375.282 537.779 374.886  c
538.123 374.490 538.295 373.886 538.295 373.073  c
538.295 372.302 538.118 371.719 537.764 371.323  c
537.420 370.927 536.988 370.729 536.467 370.729  c
535.946 370.729 535.508 370.927 535.154 371.323  c
534.811 371.709 534.639 372.302 534.639 373.104  c
h
544.656 376.214 m
544.656 375.433 l
544.260 376.047 543.682 376.354 542.922 376.354  c
542.422 376.354 541.964 376.219 541.547 375.948  c
541.130 375.667 540.807 375.282 540.578 374.792  c
540.349 374.302 540.234 373.740 540.234 373.104  c
540.234 372.490 540.339 371.927 540.547 371.417  c
540.755 370.907 541.068 370.521 541.484 370.261  c
541.901 369.990 542.365 369.854 542.875 369.854  c
543.250 369.854 543.583 369.933 543.875 370.089  c
544.167 370.245 544.406 370.448 544.594 370.698  c
544.594 367.620 l
545.641 367.620 l
545.641 376.214 l
544.656 376.214 l
h
541.328 373.104 m
541.328 373.907 541.495 374.506 541.828 374.901  c
542.161 375.287 542.557 375.479 543.016 375.479  c
543.474 375.479 543.865 375.292 544.188 374.917  c
544.510 374.542 544.672 373.969 544.672 373.198  c
544.672 372.344 544.505 371.719 544.172 371.323  c
543.849 370.927 543.448 370.729 542.969 370.729  c
542.500 370.729 542.109 370.922 541.797 371.308  c
541.484 371.683 541.328 372.282 541.328 373.104  c
h
551.549 374.214 m
552.643 374.339 l
552.476 374.974 552.158 375.469 551.689 375.823  c
551.221 376.177 550.627 376.354 549.908 376.354  c
549.002 376.354 548.278 376.073 547.736 375.511  c
547.205 374.948 546.939 374.162 546.939 373.151  c
546.939 372.110 547.210 371.302 547.752 370.729  c
548.294 370.146 548.992 369.854 549.846 369.854  c
550.679 369.854 551.356 370.136 551.877 370.698  c
552.408 371.261 552.674 372.058 552.674 373.089  c
552.674 373.151 552.674 373.245 552.674 373.370  c
548.033 373.370 l
548.075 374.058 548.268 374.584 548.611 374.948  c
548.955 375.302 549.387 375.479 549.908 375.479  c
550.294 375.479 550.622 375.381 550.893 375.183  c
551.174 374.974 551.393 374.651 551.549 374.214  c
h
548.096 372.511 m
551.564 372.511 l
551.523 371.979 551.393 371.584 551.174 371.323  c
550.830 370.917 550.393 370.714 549.861 370.714  c
549.372 370.714 548.960 370.875 548.627 371.198  c
548.304 371.521 548.127 371.959 548.096 372.511  c
h
553.941 376.214 m
553.941 367.620 l
555.004 367.620 l
555.004 376.214 l
553.941 376.214 l
h
f
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
705.000 277.047 m
736.340 246.000 l
780.660 246.000 l
812.000 277.047 l
812.000 320.953 l
780.660 352.000 l
736.340 352.000 l
705.000 320.953 l
h
f*
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
705.000 277.047 m
736.340 246.000 l
780.660 246.000 l
812.000 277.047 l
812.000 320.953 l
780.660 352.000 l
736.340 352.000 l
705.000 320.953 l
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
741.066 299.526 m
741.066 298.099 741.447 296.985 742.207 296.183  c
742.978 295.370 743.967 294.964 745.176 294.964  c
745.978 294.964 746.697 295.157 747.332 295.542  c
747.967 295.917 748.452 296.443 748.785 297.120  c
749.118 297.797 749.285 298.568 749.285 299.433  c
749.285 300.297 749.108 301.073 748.754 301.761  c
748.400 302.448 747.900 302.969 747.254 303.323  c
746.618 303.677 745.926 303.854 745.176 303.854  c
744.363 303.854 743.639 303.662 743.004 303.276  c
742.368 302.881 741.884 302.349 741.551 301.683  c
741.228 301.006 741.066 300.287 741.066 299.526  c
h
742.238 299.542 m
742.238 300.584 742.514 301.401 743.066 301.995  c
743.629 302.589 744.332 302.886 745.176 302.886  c
746.030 302.886 746.733 302.589 747.285 301.995  c
747.837 301.391 748.113 300.532 748.113 299.417  c
748.113 298.719 747.993 298.110 747.754 297.589  c
747.525 297.068 747.181 296.667 746.723 296.386  c
746.264 296.094 745.754 295.948 745.191 295.948  c
744.389 295.948 743.697 296.224 743.113 296.776  c
742.530 297.328 742.238 298.250 742.238 299.542  c
h
754.697 303.714 m
754.697 302.792 l
754.208 303.500 753.546 303.854 752.713 303.854  c
752.348 303.854 752.005 303.787 751.682 303.651  c
751.369 303.506 751.135 303.328 750.979 303.120  c
750.822 302.901 750.713 302.636 750.650 302.323  c
750.609 302.125 750.588 301.797 750.588 301.339  c
750.588 297.495 l
751.650 297.495 l
751.650 300.948 l
751.650 301.490 751.671 301.860 751.713 302.058  c
751.775 302.328 751.911 302.547 752.119 302.714  c
752.338 302.870 752.609 302.948 752.932 302.948  c
753.244 302.948 753.536 302.870 753.807 302.714  c
754.088 302.547 754.286 302.323 754.400 302.042  c
754.525 301.761 754.588 301.354 754.588 300.823  c
754.588 297.495 l
755.635 297.495 l
755.635 303.714 l
754.697 303.714 l
h
759.590 302.776 m
759.746 303.698 l
759.444 303.761 759.178 303.792 758.949 303.792  c
758.564 303.792 758.267 303.735 758.059 303.620  c
757.850 303.495 757.699 303.334 757.605 303.136  c
757.522 302.938 757.480 302.521 757.480 301.886  c
757.480 298.308 l
756.715 298.308 l
756.715 297.495 l
757.480 297.495 l
757.480 295.948 l
758.527 295.323 l
758.527 297.495 l
759.590 297.495 l
759.590 298.308 l
758.527 298.308 l
758.527 301.948 l
758.527 302.250 758.543 302.443 758.574 302.526  c
758.616 302.610 758.678 302.677 758.762 302.729  c
758.845 302.782 758.965 302.808 759.121 302.808  c
759.246 302.808 759.402 302.797 759.590 302.776  c
h
760.627 306.104 m
760.627 297.495 l
761.580 297.495 l
761.580 298.292 l
761.809 297.979 762.064 297.745 762.346 297.589  c
762.637 297.433 762.986 297.354 763.393 297.354  c
763.924 297.354 764.393 297.490 764.799 297.761  c
765.205 298.032 765.507 298.417 765.705 298.917  c
765.913 299.417 766.018 299.964 766.018 300.558  c
766.018 301.193 765.903 301.766 765.674 302.276  c
765.455 302.787 765.127 303.177 764.689 303.448  c
764.252 303.719 763.794 303.854 763.314 303.854  c
762.960 303.854 762.643 303.782 762.361 303.636  c
762.080 303.479 761.851 303.292 761.674 303.073  c
761.674 306.104 l
760.627 306.104 l
h
761.580 300.636 m
761.580 301.438 761.742 302.032 762.064 302.417  c
762.387 302.792 762.778 302.979 763.236 302.979  c
763.705 302.979 764.106 302.782 764.439 302.386  c
764.773 301.990 764.939 301.375 764.939 300.542  c
764.939 299.750 764.778 299.162 764.455 298.776  c
764.132 298.381 763.742 298.183 763.283 298.183  c
762.835 298.183 762.439 298.391 762.096 298.808  c
761.752 299.224 761.580 299.834 761.580 300.636  c
h
771.379 303.714 m
771.379 302.792 l
770.889 303.500 770.228 303.854 769.395 303.854  c
769.030 303.854 768.686 303.787 768.363 303.651  c
768.051 303.506 767.816 303.328 767.660 303.120  c
767.504 302.901 767.395 302.636 767.332 302.323  c
767.290 302.125 767.270 301.797 767.270 301.339  c
767.270 297.495 l
768.332 297.495 l
768.332 300.948 l
768.332 301.490 768.353 301.860 768.395 302.058  c
768.457 302.328 768.592 302.547 768.801 302.714  c
769.020 302.870 769.290 302.948 769.613 302.948  c
769.926 302.948 770.217 302.870 770.488 302.714  c
770.770 302.547 770.967 302.323 771.082 302.042  c
771.207 301.761 771.270 301.354 771.270 300.823  c
771.270 297.495 l
772.316 297.495 l
772.316 303.714 l
771.379 303.714 l
h
776.271 302.776 m
776.428 303.698 l
776.126 303.761 775.860 303.792 775.631 303.792  c
775.245 303.792 774.949 303.735 774.740 303.620  c
774.532 303.495 774.381 303.334 774.287 303.136  c
774.204 302.938 774.162 302.521 774.162 301.886  c
774.162 298.308 l
773.396 298.308 l
773.396 297.495 l
774.162 297.495 l
774.162 295.948 l
775.209 295.323 l
775.209 297.495 l
776.271 297.495 l
776.271 298.308 l
775.209 298.308 l
775.209 301.948 l
775.209 302.250 775.225 302.443 775.256 302.526  c
775.298 302.610 775.360 302.677 775.443 302.729  c
775.527 302.782 775.646 302.808 775.803 302.808  c
775.928 302.808 776.084 302.797 776.271 302.776  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
347.912 273.117 m
489.444 223.905 l
S
newpath
497.000 221.278 m
484.024 220.496 l
488.499 224.233 l
487.308 229.941 l
h
f
q
[ .944531 -.328422 .328422 .944531 345.108 221.916 ] concat
newpath
3.96875 27.1343 m
3.96875 9.24365 l
11.9062 9.24365 l
13.5000 9.24365 14.7083 9.40511 15.5312 9.72803  c
16.3646 10.0405 17.0260 10.6082 17.5156 11.4312  c
18.0156 12.2437 18.2656 13.1395 18.2656 14.1187  c
18.2656 15.3895 17.8542 16.4624 17.0312 17.3374  c
16.2188 18.2020 14.9531 18.7541 13.2344 18.9937  c
13.8594 19.2957 14.3333 19.5926 14.6562 19.8843  c
15.3542 20.5197 16.0104 21.3114 16.6250 22.2593  c
19.7344 27.1343 l
16.7656 27.1343 l
14.3906 23.4155 l
13.7031 22.3426 13.1354 21.5197 12.6875 20.9468  c
12.2396 20.3739 11.8385 19.9728 11.4844 19.7437  c
11.1302 19.5145 10.7708 19.3582 10.4062 19.2749  c
10.1354 19.2124 9.69271 19.1812 9.07812 19.1812  c
6.32812 19.1812 l
6.32812 27.1343 l
3.96875 27.1343 l
h
6.32812 17.1343 m
11.4219 17.1343 l
12.5052 17.1343 13.3490 17.0249 13.9531 16.8062  c
14.5677 16.5770 15.0312 16.2176 15.3438 15.7280  c
15.6667 15.2384 15.8281 14.7020 15.8281 14.1187  c
15.8281 13.2749 15.5208 12.5822 14.9062 12.0405  c
14.2917 11.4884 13.3229 11.2124 12.0000 11.2124  c
6.32812 11.2124 l
6.32812 17.1343 l
h
30.5698 22.9624 m
32.8511 23.2437 l
32.4865 24.5666 31.8198 25.5978 30.8511 26.3374  c
29.8823 27.0666 28.6479 27.4312 27.1479 27.4312  c
25.2521 27.4312 23.7469 26.8478 22.6323 25.6812  c
21.5282 24.5145 20.9761 22.8739 20.9761 20.7593  c
20.9761 18.5822 21.5334 16.8947 22.6479 15.6968  c
23.7729 14.4884 25.2313 13.8843 27.0229 13.8843  c
28.7625 13.8843 30.1792 14.4728 31.2729 15.6499  c
32.3667 16.8270 32.9136 18.4884 32.9136 20.6343  c
32.9136 20.7593 32.9136 20.9520 32.9136 21.2124  c
23.2417 21.2124 l
23.3250 22.6395 23.7261 23.7332 24.4448 24.4937  c
25.1740 25.2437 26.0802 25.6187 27.1636 25.6187  c
27.9657 25.6187 28.6479 25.4103 29.2104 24.9937  c
29.7834 24.5666 30.2365 23.8895 30.5698 22.9624  c
h
23.3667 19.3999 m
30.6011 19.3999 l
30.5073 18.3166 30.2313 17.4989 29.7729 16.9468  c
29.0750 16.1030 28.1688 15.6812 27.0542 15.6812  c
26.0438 15.6812 25.1948 16.0197 24.5073 16.6968  c
23.8198 17.3739 23.4396 18.2749 23.3667 19.3999  c
h
39.2080 27.1343 m
34.2705 14.1655 l
36.5986 14.1655 l
39.3799 21.9312 l
39.6820 22.7749 39.9580 23.6447 40.2080 24.5405  c
40.4059 23.8634 40.6768 23.0457 41.0205 22.0874  c
43.9111 14.1655 l
46.1611 14.1655 l
41.2549 27.1343 l
39.2080 27.1343 l
h
56.9736 22.9624 m
59.2549 23.2437 l
58.8903 24.5666 58.2236 25.5978 57.2549 26.3374  c
56.2861 27.0666 55.0518 27.4312 53.5518 27.4312  c
51.6559 27.4312 50.1507 26.8478 49.0361 25.6812  c
47.9320 24.5145 47.3799 22.8739 47.3799 20.7593  c
47.3799 18.5822 47.9372 16.8947 49.0518 15.6968  c
50.1768 14.4884 51.6351 13.8843 53.4268 13.8843  c
55.1663 13.8843 56.5830 14.4728 57.6768 15.6499  c
58.7705 16.8270 59.3174 18.4884 59.3174 20.6343  c
59.3174 20.7593 59.3174 20.9520 59.3174 21.2124  c
49.6455 21.2124 l
49.7288 22.6395 50.1299 23.7332 50.8486 24.4937  c
51.5778 25.2437 52.4840 25.6187 53.5674 25.6187  c
54.3695 25.6187 55.0518 25.4103 55.6143 24.9937  c
56.1872 24.5666 56.6403 23.8895 56.9736 22.9624  c
h
49.7705 19.3999 m
57.0049 19.3999 l
56.9111 18.3166 56.6351 17.4989 56.1768 16.9468  c
55.4788 16.1030 54.5726 15.6812 53.4580 15.6812  c
52.4476 15.6812 51.5986 16.0197 50.9111 16.6968  c
50.2236 17.3739 49.8434 18.2749 49.7705 19.3999  c
h
61.9868 27.1343 m
61.9868 14.1655 l
63.9556 14.1655 l
63.9556 16.1343 l
64.4660 15.2176 64.9347 14.6134 65.3618 14.3218  c
65.7889 14.0301 66.2576 13.8843 66.7681 13.8843  c
67.5076 13.8843 68.2629 14.1187 69.0337 14.5874  c
68.2681 16.6187 l
67.7368 16.3062 67.2004 16.1499 66.6587 16.1499  c
66.1795 16.1499 65.7472 16.2957 65.3618 16.5874  c
64.9868 16.8687 64.7160 17.2697 64.5493 17.7905  c
64.3097 18.5718 64.1899 19.4259 64.1899 20.3530  c
64.1899 27.1343 l
61.9868 27.1343 l
h
69.4526 23.2593 m
71.6245 22.9155 l
71.7495 23.7905 72.0881 24.4624 72.6401 24.9312  c
73.2026 25.3895 73.9839 25.6187 74.9839 25.6187  c
75.9943 25.6187 76.7443 25.4155 77.2339 25.0093  c
77.7235 24.5926 77.9683 24.1082 77.9683 23.5562  c
77.9683 23.0562 77.7495 22.6655 77.3120 22.3843  c
77.0099 22.1864 76.2651 21.9364 75.0776 21.6343  c
73.4631 21.2280 72.3433 20.8791 71.7183 20.5874  c
71.0933 20.2853 70.6193 19.8739 70.2964 19.3530  c
69.9839 18.8322 69.8276 18.2541 69.8276 17.6187  c
69.8276 17.0353 69.9578 16.4989 70.2183 16.0093  c
70.4787 15.5197 70.8381 15.1082 71.2964 14.7749  c
71.6401 14.5249 72.1037 14.3166 72.6870 14.1499  c
73.2808 13.9728 73.9162 13.8843 74.5933 13.8843  c
75.6141 13.8843 76.5047 14.0301 77.2651 14.3218  c
78.0360 14.6134 78.6037 15.0093 78.9683 15.5093  c
79.3433 16.0093 79.5985 16.6759 79.7339 17.5093  c
77.5933 17.8062 l
77.4891 17.1395 77.2026 16.6187 76.7339 16.2437  c
76.2651 15.8687 75.6037 15.6812 74.7495 15.6812  c
73.7391 15.6812 73.0203 15.8478 72.5933 16.1812  c
72.1662 16.5145 71.9526 16.9051 71.9526 17.3530  c
71.9526 17.6447 72.0412 17.8999 72.2183 18.1187  c
72.3953 18.3582 72.6766 18.5562 73.0620 18.7124  c
73.2808 18.7957 73.9266 18.9832 74.9995 19.2749  c
76.5516 19.6916 77.6349 20.0301 78.2495 20.2905  c
78.8641 20.5509 79.3433 20.9364 79.6870 21.4468  c
80.0412 21.9468 80.2183 22.5718 80.2183 23.3218  c
80.2183 24.0614 80.0047 24.7541 79.5776 25.3999  c
79.1506 26.0457 78.5360 26.5457 77.7339 26.8999  c
76.9318 27.2541 76.0203 27.4312 74.9995 27.4312  c
73.3120 27.4312 72.0256 27.0822 71.1401 26.3843  c
70.2651 25.6759 69.7026 24.6343 69.4526 23.2593  c
h
91.7026 22.9624 m
93.9839 23.2437 l
93.6193 24.5666 92.9526 25.5978 91.9839 26.3374  c
91.0151 27.0666 89.7808 27.4312 88.2808 27.4312  c
86.3849 27.4312 84.8797 26.8478 83.7651 25.6812  c
82.6610 24.5145 82.1089 22.8739 82.1089 20.7593  c
82.1089 18.5822 82.6662 16.8947 83.7808 15.6968  c
84.9058 14.4884 86.3641 13.8843 88.1558 13.8843  c
89.8953 13.8843 91.3120 14.4728 92.4058 15.6499  c
93.4995 16.8270 94.0464 18.4884 94.0464 20.6343  c
94.0464 20.7593 94.0464 20.9520 94.0464 21.2124  c
84.3745 21.2124 l
84.4578 22.6395 84.8589 23.7332 85.5776 24.4937  c
86.3068 25.2437 87.2131 25.6187 88.2964 25.6187  c
89.0985 25.6187 89.7808 25.4103 90.3433 24.9937  c
90.9162 24.5666 91.3693 23.8895 91.7026 22.9624  c
h
84.4995 19.3999 m
91.7339 19.3999 l
91.6401 18.3166 91.3641 17.4989 90.9058 16.9468  c
90.2078 16.1030 89.3016 15.6812 88.1870 15.6812  c
87.1766 15.6812 86.3276 16.0197 85.6401 16.6968  c
84.9526 17.3739 84.5724 18.2749 84.4995 19.3999  c
h
f
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
347.999 324.780 m
489.228 359.235 l
S
newpath
497.000 361.131 m
486.527 353.430 l
488.256 358.998 l
484.157 363.145 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
582.000 224.451 m
698.086 273.483 l
S
newpath
705.455 276.595 m
696.346 267.320 l
697.164 273.093 l
692.455 276.532 l
h
f
newpath
677.784 295.928 m
677.784 298.064 677.373 300.058 676.550 301.913  c
675.737 303.767 674.633 305.381 673.237 306.756  c
671.842 308.121 670.206 309.199 668.331 309.991  c
666.456 310.782 664.451 311.178 662.316 311.178  c
660.191 311.178 658.191 310.782 656.316 309.991  c
654.441 309.199 652.805 308.121 651.409 306.756  c
650.014 305.381 648.904 303.767 648.081 301.913  c
647.269 300.058 646.862 298.064 646.862 295.928  c
646.862 293.803 647.269 291.819 648.081 289.975  c
648.904 288.121 650.014 286.511 651.409 285.147  c
652.805 283.782 654.441 282.704 656.316 281.913  c
658.191 281.121 660.191 280.725 662.316 280.725  c
664.451 280.725 666.456 281.121 668.331 281.913  c
670.206 282.704 671.842 283.782 673.237 285.147  c
674.633 286.511 675.737 288.121 676.550 289.975  c
677.373 291.819 677.784 293.803 677.784 295.928  c
h
663.941 307.819 m
665.274 307.642 666.519 307.267 667.675 306.694  c
668.831 306.110 669.852 305.371 670.737 304.475  c
671.623 303.569 672.347 302.532 672.909 301.366  c
673.472 300.189 673.842 298.923 674.019 297.569  c
663.941 297.569 l
663.941 307.819 l
h
674.019 294.303 m
673.842 292.949 673.472 291.694 672.909 290.538  c
672.347 289.371 671.623 288.340 670.737 287.444  c
669.852 286.548 668.831 285.814 667.675 285.241  c
666.519 284.657 665.274 284.277 663.941 284.100  c
663.941 294.303 l
674.019 294.303 l
h
650.628 297.569 m
650.795 298.923 651.159 300.189 651.722 301.366  c
652.295 302.532 653.019 303.569 653.894 304.475  c
654.779 305.371 655.795 306.110 656.941 306.694  c
658.086 307.267 659.336 307.642 660.691 307.819  c
660.691 297.569 l
650.628 297.569 l
h
660.691 284.100 m
659.336 284.277 658.086 284.657 656.941 285.241  c
655.795 285.814 654.779 286.548 653.894 287.444  c
653.019 288.340 652.295 289.371 651.722 290.538  c
651.159 291.694 650.795 292.949 650.628 294.303  c
660.691 294.303 l
660.691 284.100 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
582.000 357.430 m
697.430 319.217 l
S
newpath
705.024 316.703 m
692.061 315.728 l
696.480 319.532 l
695.204 325.221 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
